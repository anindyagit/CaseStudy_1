package com.casestudy.rest.service.impl;




import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.casestudy.rest.db.model.Product;
import com.casestudy.rest.dto.ProductDto;
import com.casestudy.rest.service.DataStoreProductService;
import com.casestudy.rest.service.AggrProductService;
import com.casestudy.rest.service.RestClientProductService;

@Service("productService")
@Transactional
public class AggrProductServiceImpl implements AggrProductService {
	
	private final static Logger logger = LoggerFactory.getLogger(AggrProductServiceImpl.class);

	@Autowired
	private  DataStoreProductService dataStoreProductService;
	
	@Autowired
	private  RestClientProductService restClientProductService;
	
	
		
    private ProductDto productDto;
    
 
    
    @Override
	public ProductDto findByProductId(final String productId) {
		
		logger.debug("Starting calling multiple sources to retreive product info");
		
		this.productDto=null;
		
		String productName;
		Product product;
		
		
		ExecutorService executorService=Executors.newFixedThreadPool(2);
		
		Callable<String> taskFetchProductname=() -> {
			return restClientProductService.getProductNameById(productId);
		};
		
		Callable<Product> taskFetchProductFromDataStore=() -> {
			return dataStoreProductService.getProductById(productId);
		};
		
		try {
		
		Future<String> productNameFut=executorService.submit(taskFetchProductname);
		Future<Product> productFut=executorService.submit(taskFetchProductFromDataStore);
			
			
		
		
			productName = productNameFut.get();
			product= productFut.get();
		} catch (InterruptedException |ExecutionException ex) {
			
			logger.error(ex.getMessage());
			return productDto;
		} 	
		
		
		logger.debug("Product  Retreived :" + product);
		
		if (product==null|| productName==null) {
			return null;
		}
		
		return populateToProductDto(productName,product);
		
	}

	
	private ProductDto populateToProductDto(final String productName, final Product product) {
		if (this.productDto==null) {
        this.productDto=new ProductDto();
        productDto.setName(productName);
		}
        ProductDto.CurrentPrice currentPrice=productDto.new CurrentPrice();
        productDto.setCurrentprice(currentPrice);
		productDto.setId(product.getProductId());
		
		currentPrice.setCurrencyCd(product.getCurrent_price().getCurrency_code());
		currentPrice.setValue(product.getCurrent_price().getValue());
		return productDto;
	}

	@Override
	public ProductDto save(final ProductDto productDto) {
		this.productDto=productDto;
		
		Product product = dataStoreProductService.getProductById(this.productDto.getId())  ;
		
		logger.debug("Product Retreived from datastore :"+ product;
		
		if (product==null) {
			return null;
		}
		
		product.getCurrent_price().setCurrency_code(this.productDto.getCurrentprice().getCurrencyCd());
		product.getCurrent_price().setValue(this.productDto.getCurrentprice().getValue());
		product= dataStoreProductService.save(product);
		return populateToProductDto(null, product);
	}
	


	

}
