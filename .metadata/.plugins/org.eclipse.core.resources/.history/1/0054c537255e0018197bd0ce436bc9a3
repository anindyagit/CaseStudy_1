package com.casestudy.rest.client;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;


import com.casestudy.rest.client.model.Response;

@Service
public class RestClientProduct {
	
	private final static Logger logger = LoggerFactory.getLogger(RestClientProduct.class);
	
	@Autowired
	RestTemplateBuilder restTemplateBuilder;
	
	@Value( "${external.product.api.baseurl}" )
	private  String productApiBaseUrl;
	
	@Value( "${external.product.api.excludes}" )
	private  String productApiExcludes;
	
	@Value( "${external.product.connection.timeout}" )
	private  int connectionTimeout;
	
	@Value( "${external.product.read.timeout}" )
	private  int readTimeout;
	
   public  String  getProductById(final String productId){	
	   
	   logger.debug("Start executing calling product api for :"+productId);
	   
	try {
	   String finalUrl=buildFinalUrl(productId);
	   
	   logger.debug("Final URL :"+finalUrl);
	   
	  Response response = getRestTemplate().getForObject(finalUrl,Response.class);
	  
	  logger.debug("Response received :"+response);
	  
	  if (response== null) throw new RestClientException("Response retreived from external API is null");
	  
	  return getProductName(response);
	         
	}
	
	catch (RestClientException  ex) {
		
		return null;
	}
	}
   
   private  String buildFinalUrl(String productId) {
	   
	   StringBuilder urlBuilder= new StringBuilder();
	   urlBuilder.append(productApiBaseUrl);
	   urlBuilder.append(productId);
	   urlBuilder.append("?excludes=");
	   urlBuilder.append(productApiExcludes);
	   return urlBuilder.toString();
   }
   
   private String getProductName(Response response) throws RestClientException {
	   
	   if (response.getProduct()==null||response.getProduct().getItem()==null||
			   response.getProduct().getItem().getProduct_description()==null) {
		   
		   throw new RestClientException("Nested objects are null");
		   
	   }
	   
	   String productName=response.getProduct().getItem().getProduct_description().getGeneral_description();
	   
	   if (productName.isEmpty()) {
		   throw new RestClientException("Product Name can not be empty");
	   }
	   
	   return productName;
   }
   
   private RestTemplate getRestTemplate() {
	   
	  this.restTemplateBuilder.setConnectTimeout(connectionTimeout);
	  this.restTemplateBuilder.setReadTimeout(readTimeout);
	  return this.restTemplateBuilder.build();
	   
   }

}
